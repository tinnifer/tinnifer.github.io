{"version":3,"file":"client-connection.js","names":["PSConnection","socket","connected","queue","connect","_proto","prototype","_this","server","PS","port","protocol","url","host","prefix","SockJS","timeout","onopen","console","log","_i2","_this$queue2","length","msg","send","update","onmessage","e","receive","data","onclose","isOffline","roomid","rooms","disconnect","close","connection","push","PSLoginServer","_class","_proto2","query","id","location","pathname","endsWith","Config","routes","client","POKEMON_SHOWDOWN_TESTCLIENT_KEY","sid","replace","Net","get","method","body","then","res","JSON","parse","slice","HttpError","_Error","_inheritsLoose","message","statusCode","_this2","call","name","Error","captureStackTrace","_assertThisInitialized","err","_wrapNativeSuper","NetRequest","uri","_proto3","_this3","opts","arguments","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","includes","encodeQuery","open","onreadystatechange","DONE","readyState","status","responseText","statusText","setRequestHeader","post","Object","assign","urlencodedData","key","encodeURIComponent"],"sources":["../src/client-connection.ts"],"sourcesContent":["/**\r\n * Connection library\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ndeclare var SockJS: any;\r\n\r\nclass PSConnection {\r\n\tsocket: any = null;\r\n\tconnected = false;\r\n\tqueue = [] as string[];\r\n\tconstructor() {\r\n\t\tthis.connect();\r\n\t}\r\n\tconnect() {\r\n\t\tconst server = PS.server;\r\n\t\tconst port = server.protocol === 'https' ? '' : ':' + server.port;\r\n\t\tconst url = server.protocol + '://' + server.host + port + server.prefix;\r\n\t\tconst socket = this.socket = new SockJS(url, [], {timeout: 5 * 60 * 1000});\r\n\t\tsocket.onopen = () => {\r\n\t\t\tconsole.log('\\u2705 (CONNECTED)');\r\n\t\t\tthis.connected = true;\r\n\t\t\tPS.connected = true;\r\n\t\t\tfor (const msg of this.queue) socket.send(msg);\r\n\t\t\tthis.queue = [];\r\n\t\t\tPS.update();\r\n\t\t};\r\n\t\tsocket.onmessage = (e: MessageEvent) => {\r\n\t\t\tPS.receive('' + e.data);\r\n\t\t};\r\n\t\tsocket.onclose = () => {\r\n\t\t\tconsole.log('\\u2705 (DISCONNECTED)');\r\n\t\t\tthis.connected = false;\r\n\t\t\tPS.connected = false;\r\n\t\t\tPS.isOffline = true;\r\n\t\t\tfor (const roomid in PS.rooms) {\r\n\t\t\t\tPS.rooms[roomid]!.connected = false;\r\n\t\t\t}\r\n\t\t\tthis.socket = null;\r\n\t\t\tPS.update();\r\n\t\t};\r\n\t}\r\n\tdisconnect() {\r\n\t\tthis.socket.close();\r\n\t\tPS.connection = null;\r\n\t}\r\n\tsend(msg: string) {\r\n\t\tif (!this.connected) {\r\n\t\t\tthis.queue.push(msg);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.socket.send(msg);\r\n\t}\r\n}\r\n\r\nPS.connection = new PSConnection();\r\n\r\nconst PSLoginServer = new class {\r\n\tquery(data: PostData): Promise<{[k: string]: any} | null> {\r\n\t\tlet url = '/~~' + PS.server.id + '/action.php';\r\n\t\tif (location.pathname.endsWith('.html')) {\r\n\t\t\turl = 'https://' + Config.routes.client + url;\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (typeof POKEMON_SHOWDOWN_TESTCLIENT_KEY === 'string') {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tdata.sid = POKEMON_SHOWDOWN_TESTCLIENT_KEY.replace(/\\%2C/g, ',');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Net(url).get({method: data ? 'POST' : 'GET', body: data}).then(\r\n\t\t\tres => res ? JSON.parse(res.slice(1)) : null\r\n\t\t).catch(\r\n\t\t\t() => null\r\n\t\t);\r\n\t}\r\n};\r\n\r\ninterface PostData {\r\n\t[key: string]: string | number;\r\n}\r\ninterface NetRequestOptions {\r\n\tmethod?: 'GET' | 'POST';\r\n\tbody?: string | PostData;\r\n\tquery?: PostData;\r\n}\r\nclass HttpError extends Error {\r\n\tstatusCode?: number;\r\n\tbody: string;\r\n\tconstructor(message: string, statusCode: number | undefined, body: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'HttpError';\r\n\t\tthis.statusCode = statusCode;\r\n\t\tthis.body = body;\r\n\t\ttry {\r\n\t\t\t(Error as any).captureStackTrace(this, HttpError);\r\n\t\t} catch (err) {}\r\n\t}\r\n}\r\nclass NetRequest {\r\n\turi: string;\r\n\tconstructor(uri: string) {\r\n\t\tthis.uri = uri;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a basic http/https request to the URI.\r\n\t * Returns the response data.\r\n\t *\r\n\t * Will throw if the response code isn't 200 OK.\r\n\t *\r\n\t * @param opts request opts\r\n\t */\r\n\tget(opts: NetRequestOptions = {}): Promise<string> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\tlet uri = this.uri;\r\n\t\t\tif (opts.query) {\r\n\t\t\t\turi += (uri.includes('?') ? '&' : '?') + Net.encodeQuery(opts.query);\r\n\t\t\t}\r\n\t\t\txhr.open(opts.method || 'GET', uri);\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tconst DONE = 4;\r\n\t\t\t\tif (xhr.readyState === DONE) {\r\n\t\t\t\t\tif (xhr.status === 200) {\r\n\t\t\t\t\t\tresolve(xhr.responseText || '');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst err = new HttpError(xhr.statusText || \"Connection error\", xhr.status, xhr.responseText);\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif (opts.body) {\r\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\t\t\t\txhr.send(Net.encodeQuery(opts.body));\r\n\t\t\t} else {\r\n\t\t\t\txhr.send();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t * @param body POST body\r\n\t */\r\n\tpost(opts: Omit<NetRequestOptions, 'body'>, body: PostData | string): Promise<string>;\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t */\r\n\tpost(opts?: NetRequestOptions): Promise<string>;\r\n\tpost(opts: NetRequestOptions = {}, body?: PostData | string) {\r\n\t\tif (!body) body = opts.body;\r\n\t\treturn this.get({\r\n\t\t\t...opts,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction Net(uri: string) {\r\n\treturn new NetRequest(uri);\r\n}\r\n\r\nNet.encodeQuery = function (data: string | PostData) {\r\n\tif (typeof data === 'string') return data;\r\n\tlet urlencodedData = '';\r\n\tfor (const key in data) {\r\n\t\tif (urlencodedData) urlencodedData += '&';\r\n\t\turlencodedData += encodeURIComponent(key) + '=' + encodeURIComponent((data as any)[key]);\r\n\t}\r\n\treturn urlencodedData;\r\n};\r\n"],"mappings":"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"}