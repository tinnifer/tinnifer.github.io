{"version":3,"file":"battle-dex-search.js","names":["DexSearch","searchType","arguments","length","undefined","formatid","species","query","dex","Dex","typedSearch","results","exactMatch","firstPokemonColumn","sortCol","reverseSort","filters","setType","_proto","prototype","getTypedSearch","format","speciesOrSet","BattlePokemonSearch","BattleItemSearch","BattleMoveSearch","BattleAbilitySearch","BattleTypeSearch","BattleCategorySearch","find","_this$typedSearch","toID","indexOf","_this$typedSearch2","getResults","textSearch","_this$typedSearch3","addFilter","entry","type","includes","_i2","_this$filters2","filter","push","removeFilter","filterid","join","deleted","i","splice","pop","toggleSort","filterLabel","filterType","illegalLabel","id","_this$typedSearch4","_this$typedSearch4$il","illegalReasons","getTier","_this$typedSearch5","_this$typedSearch6","_this$typedSearch7","searchTypeIndex","typeTable","qFilterType","slice","window","BattleTypeChart","_query$split","split","head","body","getClosest","BattleSearchIndex","passType","searchPasses","queryAlias","BattleAliases","aliasPassType","unshift","substr","matchLength","matchQuery","bufs","topbufIndex","count","nearMatch","instafilter","instafilterSort","illegal","searchPass","shift","typeIndex","gen","startsWith","matchStart","matchEnd","originalIndex","BattleSearchIndexOffset","charCodeAt","typeName","curBufLength","topbuf","concat","Array","apply","fType","fId","_this$typedSearch8","buf","illegalBuf","charAt","toUpperCase","BattlePokedex","types","get","ability","abilities","name","hasAbility","BattleMovedex","category","left","right","mid","Math","floor","pokemon","tier","move","item","egggroup","article","BattleTypedSearch","set","formatType","baseResults","baseIllegalResults","sortRow","Number","forGen","mod","endsWith","_proto2","_this","getDefaultResults","call","getBaseResults","legalityFilter","_i4","_this$baseResults2","_ref","resultType","value","getTable","illegalResults","_i6","_this$baseResults4","result","_i8","_this$baseIllegalResu2","_ref2","rowType","sort","_ref3","firstLearnsetid","speciesid","_this$formatType","table","BattleTeambuilderTable","learnsets","_decodeFusionID","decodeFusionID","first","second","exists","baseLearnsetid","baseSpecies","battleOnly","nextLearnsetid","learnsetid","_decodeFusionID2","lsetSpecies","next","changesFrom","prevo","canLearn","moveid","moves","isNonstandard","genChar","_this$formatType2","learnset","num","String","tableKey","overrideTier","_BattleTypedSearch","_inheritsLoose","_this2","_len","args","_key","_proto3","_this$formatType3","_this$formatType4","_this$formatType5","_this$formatType6","isVGCOrBS","isDoublesOrBS","tierSet","tiers","map","r","slices","formatSlices","Uber","Regular","OU","UU","RU","NU","PU","ZU","LC","AG","DUber","DOU","DUU","DNU","zuBans","_ref4","monotypeBans","_ref5","test","_ref6","row","_i10","_ref7","eggGroups","_this3","sortOrder","_ref8","_ref9","rowType1","id1","rowType2","id2","stat1","baseStats","stat2","_ref10","_ref11","base1","base2","bst1","hp","atk","def","spa","spd","spe","bst2","_ref12","_ref13","name1","name2","Error","_BattleTypedSearch2","_proto4","BattleAbilities","isHackmons","isAAA","abilitySet","isMega","goodAbilities","poorAbilities","badAbilities","_i13","_abilities$sort$map2","abil","rating","_i15","_ref14","_BattleTypedSearch3","_proto5","BattleItems","_this$formatType7","itemSet","items","speciesName","speciesSpecific","_i17","_this$dex$items$get$i","itemUser","_i19","_ref15","_BattleTypedSearch4","_this4","_len2","_key2","_proto6","moveIsNotUseless","_moveData$flags","_moveData$flags2","_moveData$flags3","abilityid","itemid","weightkg","evos","GOOD_DOUBLES_MOVES","moveData","GOOD_STATUS_MOVES","basePower","GOOD_WEAK_MOVES","flags","charge","recharge","slicing","BAD_STRONG_MOVES","_this$formatType8","_this$formatType9","isSTABmons","isTradebacks","regionBornLegality","sketchMoves","sketch","lsetTable","_this$formatType10","_BattleTeambuilderTab","learnsetEntry","minGenCode","isFusion","nonstandardMoves","noSketch","isMax","isZ","speciesTypes","moveTypes","genDex","prevoSpecies","excludedForme","s","forme","otherFormes","_i21","_baseSpecies$otherFor2","formeName","valid","_i23","usableMoves","uselessMoves","_i25","_moves2","isUsable","_i27","_i29","_ref16","_this5","powerTable","frustration","spitup","trumpcard","naturalgift","grassknot","lowkick","gyroball","electroball","flail","reversal","present","wringout","crushgrip","heatcrash","heavyslam","fling","magnitude","beatup","punishment","psywave","nightshade","seismictoss","dragonrage","sonicboom","superfang","endeavor","sheercold","fissure","horndrill","guillotine","_ref17","_ref18","move1","move2","pow1","pow2","_ref19","_ref20","accuracy1","accuracy","accuracy2","_ref21","_ref22","pp1","pp","pp2","_ref23","_ref24","_BattleTypedSearch5","_proto7","physical","special","status","_BattleTypedSearch6","_proto8"],"sources":["../src/battle-dex-search.ts"],"sourcesContent":["/**\r\n * Search\r\n *\r\n * Code for searching for dex information, used by the Dex and\r\n * Teambuilder.\r\n *\r\n * Dependencies: battledata, search-index\r\n * Optional dependencies: pokedex, moves, items, abilities\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ntype SearchType = (\r\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\r\n);\r\n\r\ntype SearchRow = (\r\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\r\n);\r\n\r\ntype SearchFilter = [string, string];\r\n\r\n/** ID, SearchType, index (if alias), offset (if offset alias) */\r\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\r\ndeclare const BattleSearchIndexOffset: any;\r\ndeclare const BattleTeambuilderTable: any;\r\n\r\n/**\r\n * Backend for search UIs.\r\n */\r\nclass DexSearch {\r\n\tquery = '';\r\n\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\r\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\r\n\r\n\tresults: SearchRow[] | null = null;\r\n\texactMatch = false;\r\n\r\n\tstatic typeTable = {\r\n\t\tpokemon: 1,\r\n\t\ttype: 2,\r\n\t\ttier: 3,\r\n\t\tmove: 4,\r\n\t\titem: 5,\r\n\t\tability: 6,\r\n\t\tegggroup: 7,\r\n\t\tcategory: 8,\r\n\t\tarticle: 9,\r\n\t};\r\n\tstatic typeName = {\r\n\t\tpokemon: 'Pok&eacute;mon',\r\n\t\ttype: 'Type',\r\n\t\ttier: 'Tiers',\r\n\t\tmove: 'Moves',\r\n\t\titem: 'Items',\r\n\t\tability: 'Abilities',\r\n\t\tegggroup: 'Egg group',\r\n\t\tcategory: 'Category',\r\n\t\tarticle: 'Article',\r\n\t};\r\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\r\n\r\n\t/**\r\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\r\n\t * things are according to the base filters, falling back to dex number (for\r\n\t * Pokemon) and name (for everything else).\r\n\t */\r\n\tsortCol: string | null = null;\r\n\treverseSort = false;\r\n\r\n\t/**\r\n\t * Filters for the search result. Does not include the two base filters\r\n\t * (format and species).\r\n\t */\r\n\tfilters: SearchFilter[] | null = null;\r\n\r\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\r\n\t\tthis.setType(searchType, formatid, species);\r\n\t}\r\n\r\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tif (!searchType) return null;\r\n\t\tswitch (searchType) {\r\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\r\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\r\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\r\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\r\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\r\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfind(query: string) {\r\n\t\tquery = toID(query);\r\n\t\tif (this.query === query && this.results) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.query = query;\r\n\t\tif (!query || (this.typedSearch?.searchType === 'pokemon' && query.indexOf('/') === query.length - 1)) {\r\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol, this.reverseSort) || [];\r\n\t\t} else {\r\n\t\t\tthis.results = this.textSearch(query);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\t// invalidate caches\r\n\t\tthis.results = null;\r\n\r\n\t\tif (searchType !== this.typedSearch?.searchType) {\r\n\t\t\tthis.filters = null;\r\n\t\t\tthis.sortCol = null;\r\n\t\t}\r\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\r\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\r\n\t}\r\n\r\n\taddFilter(entry: SearchFilter): boolean {\r\n\t\tif (!this.typedSearch) return false;\r\n\t\tlet [type] = entry;\r\n\t\tif (this.typedSearch.searchType === 'pokemon') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\r\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.results = null;\r\n\t\t\tfor (const filter of this.filters) {\r\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\treturn true;\r\n\t\t} else if (this.typedSearch.searchType === 'move') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\r\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\tthis.results = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFilter(entry?: SearchFilter): boolean {\r\n\t\tif (!this.filters) return false;\r\n\t\tif (entry) {\r\n\t\t\tconst filterid = entry.join(':');\r\n\t\t\tlet deleted: string[] | null = null;\r\n\t\t\t// delete specific filter\r\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\r\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\r\n\t\t\t\t\tdeleted = this.filters[i];\r\n\t\t\t\t\tthis.filters.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!deleted) return false;\r\n\t\t} else {\r\n\t\t\tthis.filters.pop();\r\n\t\t}\r\n\t\tif (!this.filters.length) this.filters = null;\r\n\t\tthis.results = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\ttoggleSort(sortCol: string) {\r\n\t\tif (this.sortCol === sortCol) {\r\n\t\t\tif (!this.reverseSort) {\r\n\t\t\t\tthis.reverseSort = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.sortCol = null;\r\n\t\t\t\tthis.reverseSort = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.sortCol = sortCol;\r\n\t\t\tthis.reverseSort = false;\r\n\t\t}\r\n\t\tthis.results = null;\r\n\t}\r\n\r\n\tfilterLabel(filterType: string) {\r\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\r\n\t\t\treturn 'Filter';\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tillegalLabel(id: ID) {\r\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\r\n\t}\r\n\r\n\tgetTier(species: Species) {\r\n\t\treturn this.typedSearch?.getTier(species) || '';\r\n\t}\r\n\r\n\ttextSearch(query: string): SearchRow[] {\r\n\t\tquery = toID(query);\r\n\r\n\t\tthis.exactMatch = false;\r\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\r\n\r\n\t\t// If searchType exists, we're searching mainly for results of that type.\r\n\t\t// We'll still search for results of other types, but those results\r\n\t\t// will only be used to filter results for that type.\r\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\r\n\r\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\r\n\t\tlet qFilterType: 'type' | '' = '';\r\n\t\tif (query.slice(-4) === 'type') {\r\n\t\t\tif (query.slice(0, -4) in window.BattleTypeChart) {\r\n\t\t\t\tquery = query.slice(0, -4);\r\n\t\t\t\tqFilterType = 'type';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (searchType === 'pokemon' && query.includes('/')) {\r\n\t\t\tlet [head, body] = query.split('/');\r\n\t\t\tquery = body || '';\r\n\t\t}\r\n\r\n\t\t// i represents the location of the search index we're looking at\r\n\t\tlet i = DexSearch.getClosest(query);\r\n\t\tthis.exactMatch = (BattleSearchIndex[i][0] === query);\r\n\r\n\t\t// Even with output buffer buckets, we make multiple passes through\r\n\t\t// the search index. searchPasses is a queue of which pass we're on:\r\n\t\t// [passType, i, query]\r\n\r\n\t\t// By doing an alias pass after the normal pass, we ensure that\r\n\t\t// mid-word matches only display after start matches.\r\n\t\tlet passType: SearchPassType | '' = '';\r\n\t\t/**\r\n\t\t * pass types:\r\n\t\t * * '': time to pop the next pass off the searchPasses queue\r\n\t\t * * 'normal': start at i and stop when results no longer start with query\r\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\r\n\t\t * * 'fuzzy': start at i and stop when you have two results\r\n\t\t * * 'exact': like normal, but stop at i\r\n\t\t */\r\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\r\n\t\t/**\r\n\t\t * [passType, i, query]\r\n\t\t *\r\n\t\t * i = index of BattleSearchIndex to start from\r\n\t\t *\r\n\t\t * By doing an alias pass after the normal pass, we ensure that\r\n\t\t * mid-word matches only display after start matches.\r\n\t\t */\r\n\t\ttype SearchPass = [SearchPassType, number, string];\r\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\r\n\r\n\t\t// For performance reasons, only do an alias pass if query is at\r\n\t\t// least 2 chars long\r\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\r\n\r\n\t\t// If the query matches an official alias in BattleAliases: These are\r\n\t\t// different from the aliases in the search index and are given\r\n\t\t// higher priority. We'll do a normal pass through the index with\r\n\t\t// the alias text before any other passes.\r\n\t\tlet queryAlias;\r\n\t\tif (query in BattleAliases) {\r\n\t\t\tif (['sub', 'tr'].includes(query) || toID(BattleAliases[query]).slice(0, query.length) !== query) {\r\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\r\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\r\n\t\t\t\tsearchPasses.unshift([aliasPassType, DexSearch.getClosest(queryAlias), queryAlias]);\r\n\t\t\t}\r\n\t\t\tthis.exactMatch = true;\r\n\t\t}\r\n\r\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\r\n\t\t// Fuzzy matches will still be shown after alias matches\r\n\t\tif (!this.exactMatch && BattleSearchIndex[i][0].substr(0, query.length) !== query) {\r\n\t\t\t// No results start with this. Do a fuzzy match pass.\r\n\t\t\tlet matchLength = query.length - 1;\r\n\t\t\tif (!i) i++;\r\n\t\t\twhile (matchLength &&\r\n\t\t\t\tBattleSearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\r\n\t\t\t\tBattleSearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\r\n\t\t\t\tmatchLength--;\r\n\t\t\t}\r\n\t\t\tlet matchQuery = query.substr(0, matchLength);\r\n\t\t\twhile (i >= 1 && BattleSearchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\r\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\r\n\t\t}\r\n\r\n\t\t// We split the output buffers into 8 buckets.\r\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\r\n\t\t// pokemon, types, moves, etc (see typeTable).\r\n\r\n\t\t// When we're done, the buffers are concatenated together to form\r\n\t\t// our results, with each buffer getting its own header, unlike\r\n\t\t// multiple-pass results, which have no header.\r\n\r\n\t\t// Notes:\r\n\t\t// - if we have a searchType, that searchType's buffer will be on top\r\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\r\n\t\tlet topbufIndex = -1;\r\n\r\n\t\tlet count = 0;\r\n\t\tlet nearMatch = false;\r\n\r\n\t\t/** [type, id, typeIndex] */\r\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\r\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\r\n\t\t// We aren't actually looping through the entirety of the searchIndex\r\n\t\tfor (i = 0; i < BattleSearchIndex.length; i++) {\r\n\t\t\tif (!passType) {\r\n\t\t\t\tlet searchPass = searchPasses.shift();\r\n\t\t\t\tif (!searchPass) break;\r\n\t\t\t\tpassType = searchPass[0];\r\n\t\t\t\ti = searchPass[1];\r\n\t\t\t\tquery = searchPass[2];\r\n\t\t\t}\r\n\r\n\t\t\tlet entry = BattleSearchIndex[i];\r\n\t\t\tlet id = entry[0];\r\n\t\t\tlet type = entry[1];\r\n\r\n\t\t\tif (!id) break;\r\n\r\n\t\t\tif (passType === 'fuzzy') {\r\n\t\t\t\t// fuzzy match pass; stop after 2 results\r\n\t\t\t\tif (count >= 2) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tnearMatch = true;\r\n\t\t\t} else if (passType === 'exact') {\r\n\t\t\t\t// exact pass; stop after 1 result\r\n\t\t\t\tif (count >= 1) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (id.substr(0, query.length) !== query) {\r\n\t\t\t\t// regular pass, time to move onto our next match\r\n\t\t\t\tpassType = '';\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (entry.length > 2) {\r\n\t\t\t\t// alias entry\r\n\t\t\t\tif (passType !== 'alias') continue;\r\n\t\t\t} else {\r\n\t\t\t\t// normal entry\r\n\t\t\t\tif (passType === 'alias') continue;\r\n\t\t\t}\r\n\r\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\r\n\r\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\r\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\r\n\r\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\r\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\r\n\t\t\tif (searchType === 'pokemon' && typeIndex === 3 && this.dex.gen < 9) continue;\r\n\t\t\t// For move queries, accept types/categories as filters\r\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\r\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\r\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\r\n\t\t\t// For ability/item queries, don't accept anything else as a filter\r\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\r\n\t\t\t// Query was a type name followed 'type'; only show types\r\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\r\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\r\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\r\n\r\n\t\t\tlet matchStart = 0;\r\n\t\t\tlet matchEnd = 0;\r\n\t\t\tif (passType === 'alias') {\r\n\t\t\t\t// alias entry\r\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\r\n\t\t\t\tmatchStart = entry[3]!;\r\n\t\t\t\tlet originalIndex = entry[2]!;\r\n\t\t\t\tif (matchStart) {\r\n\t\t\t\t\tmatchEnd = matchStart + query.length;\r\n\t\t\t\t\tmatchStart += (BattleSearchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t\tmatchEnd += (BattleSearchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t}\r\n\t\t\t\tid = BattleSearchIndex[originalIndex][0];\r\n\t\t\t} else {\r\n\t\t\t\tmatchEnd = query.length;\r\n\t\t\t\tif (matchEnd) matchEnd += (BattleSearchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t}\r\n\r\n\t\t\t// some aliases are substrings\r\n\t\t\tif (queryAlias === id && query !== id) continue;\r\n\r\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\r\n\t\t\t\t// This is a filter, set it as an instafilter candidate\r\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\r\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// show types above Arceus formes\r\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\r\n\t\t\t\ttopbufIndex = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\r\n\t\t\t\t// Always show illegal results under legal results.\r\n\t\t\t\t// This is done by putting legal results (and the type header)\r\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\r\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\r\n\t\t\t\t// illegal results will be seamlessly right under legal results.\r\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\r\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tif (!bufs[typeIndex].length) {\r\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// don't match duplicate aliases\r\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\r\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\r\n\r\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\r\n\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tlet topbuf: SearchRow[] = [];\r\n\t\tif (nearMatch) {\r\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\r\n\t\t}\r\n\t\tif (topbufIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\r\n\t\t\tbufs[topbufIndex] = [];\r\n\t\t}\r\n\t\tif (searchTypeIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\r\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\r\n\t\t\tbufs[searchTypeIndex] = [];\r\n\t\t\tbufs[0] = [];\r\n\t\t}\r\n\r\n\t\tif (instafilter && count < 20) {\r\n\t\t\t// Result count is less than 20, so we can instafilter\r\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\r\n\t\t}\r\n\r\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\r\n\t\treturn this.results;\r\n\t}\r\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\r\n\t\tlet buf: SearchRow[] = [];\r\n\t\tlet illegalBuf: SearchRow[] = [];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\t\tif (searchType === 'pokemon') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as TypeName;\r\n\t\t\t\tbuf.push(['header', `${type}-type Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].types) continue;\r\n\t\t\t\t\tif (this.dex.species.get(id).types.includes(type)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tlet ability = Dex.abilities.get(fId).name;\r\n\t\t\t\tbuf.push(['header', `${ability} Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].abilities) continue;\r\n\t\t\t\t\tif (Dex.hasAbility(this.dex.species.get(id), ability)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (searchType === 'move') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].type === type) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${category} moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].category === category) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...buf, ...illegalBuf];\r\n\t}\r\n\r\n\tstatic getClosest(query: string) {\r\n\t\t// binary search through the index!\r\n\t\tlet left = 0;\r\n\t\tlet right = BattleSearchIndex.length - 1;\r\n\t\twhile (right > left) {\r\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\r\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\r\n\t\t\t\t// that's us\r\n\t\t\t\treturn mid;\r\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\r\n\t\t\t\tleft = mid + 1;\r\n\t\t\t} else {\r\n\t\t\t\tright = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\r\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\r\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\nabstract class BattleTypedSearch<T extends SearchType> {\r\n\tsearchType: T;\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\t/**\r\n\t * Format is the first of two base filters. It constrains results to things\r\n\t * legal in the format, and affects the default sort.\r\n\t *\r\n\t * This string specifically normalizes out generation number and the words\r\n\t * \"Doubles\" and \"Let's Go\" from the name.\r\n\t */\r\n\tformat = '' as ID;\r\n\t/**\r\n\t * `species` is the second of two base filters. It constrains results to\r\n\t * things that species can use, and affects the default sort.\r\n\t */\r\n\tspecies = '' as ID;\r\n\t/**\r\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\r\n\t * (Abilities/items can affect what moves are sorted as usable.)\r\n\t */\r\n\tset: PokemonSet | null = null;\r\n\r\n\tprotected formatType: 'doubles' | 'bdsp' | 'bdspdoubles' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' |\r\n\t'dlc1' | 'dlc1doubles' | 'stadium' | 'lc' | null = null;\r\n\r\n\t/**\r\n\t * Cached copy of what the results list would be with only base filters\r\n\t * (i.e. with an empty `query` and `filters`)\r\n\t */\r\n\tbaseResults: SearchRow[] | null = null;\r\n\t/**\r\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\r\n\t * is wondering why a specific result isn't showing up.\r\n\t */\r\n\tbaseIllegalResults: SearchRow[] | null = null;\r\n\tillegalReasons: {[id: string]: string} | null = null;\r\n\tresults: SearchRow[] | null = null;\r\n\r\n\tprotected readonly sortRow: SearchRow | null = null;\r\n\r\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tthis.searchType = searchType;\r\n\r\n\t\tthis.baseResults = null;\r\n\t\tthis.baseIllegalResults = null;\r\n\r\n\t\tif (format.slice(0, 3) === 'gen') {\r\n\t\t\tconst gen = (Number(format.charAt(3)) || 6);\r\n\t\t\tformat = (format.slice(4) || 'customgame') as ID;\r\n\t\t\tthis.dex = Dex.forGen(gen);\r\n\t\t} else if (!format) {\r\n\t\t\tthis.dex = Dex;\r\n\t\t}\r\n\r\n\t\tif (format.startsWith('dlc1')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'dlc1doubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'dlc1';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('stadium')) {\r\n\t\t\tthis.formatType = 'stadium';\r\n\t\t\tformat = format.slice(7) as ID;\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('vgc')) this.formatType = 'doubles';\r\n\t\tif (format === 'vgc2020') this.formatType = 'dlc1doubles';\r\n\t\tif (format.includes('bdsp')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'bdspdoubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'bdsp';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t\tthis.dex = Dex.mod('gen8bdsp' as ID);\r\n\t\t}\r\n\t\tif (format.includes('doubles') && this.dex.gen > 4 && !this.formatType) this.formatType = 'doubles';\r\n\t\tif (format === 'partnersincrime') this.formatType = 'doubles';\r\n\t\tif (format.startsWith('ffa') || format === 'freeforall') this.formatType = 'doubles';\r\n\t\tif (format.includes('letsgo')) {\r\n\t\t\tthis.formatType = 'letsgo';\r\n\t\t\tthis.dex = Dex.mod('gen7letsgo' as ID);\r\n\t\t}\r\n\t\tif (format.includes('nationaldex') || format.startsWith('nd') || format.includes('natdex')) {\r\n\t\t\tformat = (format.startsWith('nd') ? format.slice(2) :\r\n\t\t\t\tformat.includes('natdex') ? format.slice(6) : format.slice(11)) as ID;\r\n\t\t\tthis.formatType = 'natdex';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (this.formatType === 'letsgo') format = format.slice(6) as ID;\r\n\t\tif (format.includes('metronome')) {\r\n\t\t\tthis.formatType = 'metronome';\r\n\t\t}\r\n\t\tif (format.endsWith('nfe')) {\r\n\t\t\tformat = format.slice(3) as ID;\r\n\t\t\tthis.formatType = 'nfe';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif ((format.endsWith('lc') || format.startsWith('lc')) && format !== 'caplc') {\r\n\t\t\tthis.formatType = 'lc';\r\n\t\t\tformat = 'lc' as ID;\r\n\t\t}\r\n\t\tif (format.includes('fusion')) {\r\n\t\t\tthis.formatType = 'fusion';\r\n\t\t}\r\n\t\t\r\n\t\tthis.format = format;\r\n\r\n\t\tthis.species = '' as ID;\r\n\t\tthis.set = null;\r\n\t\tif (typeof speciesOrSet === 'string') {\r\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\r\n\t\t} else {\r\n\t\t\tthis.set = speciesOrSet as PokemonSet;\r\n\t\t\tthis.species = toID(this.set.species);\r\n\t\t}\r\n\t\tif (!searchType || !this.set) return;\r\n\t}\r\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tif (sortCol === 'type') {\r\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'category') {\r\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'ability') {\r\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this)];\r\n\t\t}\r\n\r\n\t\tif (!this.baseResults) {\r\n\t\t\tthis.baseResults = this.getBaseResults();\r\n\t\t}\r\n\r\n\t\tif (!this.baseIllegalResults) {\r\n\t\t\tconst legalityFilter: {[id: string]: 1} = {};\r\n\t\t\tfor (const [resultType, value] of this.baseResults) {\r\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\r\n\t\t\t}\r\n\t\t\tthis.baseIllegalResults = [];\r\n\t\t\tthis.illegalReasons = {};\r\n\r\n\t\t\tfor (const id in this.getTable()) {\r\n\t\t\t\tif (!(id in legalityFilter)) {\r\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\r\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet results: SearchRow[];\r\n\t\tlet illegalResults: SearchRow[] | null;\r\n\r\n\t\tif (filters) {\r\n\t\t\tresults = [];\r\n\t\t\tillegalResults = [];\r\n\t\t\tfor (const result of this.baseResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\r\n\t\t\t\t\t\tresults[results.length - 1] = result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresults.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\r\n\t\t\t\tresults.pop();\r\n\t\t\t}\r\n\t\t\tfor (const result of this.baseIllegalResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tillegalResults.push(result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresults = [...this.baseResults];\r\n\t\t\tillegalResults = null;\r\n\t\t}\r\n\r\n\t\tif (sortCol) {\r\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\tresults = this.sort(results, sortCol, reverseSort);\r\n\t\t\tif (illegalResults) {\r\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol, reverseSort);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.sortRow) {\r\n\t\t\tresults = [this.sortRow, ...results];\r\n\t\t}\r\n\t\tif (illegalResults && illegalResults.length) {\r\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprotected firstLearnsetid(speciesid: ID) {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.formatType?.startsWith('bdsp')) table = table['gen8bdsp'];\r\n\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\r\n\t\tif (speciesid in table.learnsets) return speciesid;\r\n\t\t\r\n\t\tlet [first, second] = decodeFusionID(speciesid);\r\n\t\tif (second) {\r\n\t\t\treturn this.firstLearnsetid(first);\r\n\t\t}\r\n\t\t\r\n\t\tconst species = this.dex.species.get(speciesid);\r\n\t\tif (!species.exists) return '' as ID;\r\n\r\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\r\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\r\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\r\n\t\t}\r\n\t\tif (baseLearnsetid in table.learnsets) return baseLearnsetid;\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID) {\r\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\r\n\t\t\treturn 'rockruffdusk' as ID;\r\n\t\t}\r\n\t\tconst [first, second] = decodeFusionID(speciesid);\r\n\t\tif (second && learnsetid === first) {\t\t\t\r\n\t\t\treturn this.firstLearnsetid(second);\t\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tconst lsetSpecies = this.dex.species.get(learnsetid);\r\n\t\tif (!lsetSpecies.exists) return '' as ID;\r\n\r\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\r\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\r\n\t\tif (lsetSpecies.id === 'sinisteaantique') return 'sinistea' as ID;\r\n\r\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\r\n\t\tif (next) return toID(next);\r\n\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected canLearn(speciesid: ID, moveid: ID) {\r\n\t\tconst move = this.dex.moves.get(moveid);\r\n\t\tif (this.formatType === 'natdex' && move.isNonstandard && move.isNonstandard !== 'Past') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst gen = this.dex.gen;\r\n\t\tlet genChar = `${gen}`;\r\n\t\tif (\r\n\t\t\tthis.format.startsWith('vgc') ||\r\n\t\t\tthis.format.startsWith('battlespot') ||\r\n\t\t\tthis.format.startsWith('battlestadium') ||\r\n\t\t\tthis.format.startsWith('battlefestival') ||\r\n\t\t\t(this.dex.gen === 9 && this.formatType !== 'natdex')\r\n\t\t) {\r\n\t\t\tif (gen === 9) {\r\n\t\t\t\tgenChar = 'a';\r\n\t\t\t} else if (gen === 8) {\r\n\t\t\t\tgenChar = 'g';\r\n\t\t\t} else if (gen === 7) {\r\n\t\t\t\tgenChar = 'q';\r\n\t\t\t} else if (gen === 6) {\r\n\t\t\t\tgenChar = 'p';\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet table = BattleTeambuilderTable;\r\n\t\t\tif (this.formatType?.startsWith('bdsp')) table = table['gen8bdsp'];\r\n\t\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\r\n\t\t\tlet learnset = table.learnsets[learnsetid];\r\n\t\t\tif (learnset && (moveid in learnset) && (!this.format.startsWith('tradebacks') ? learnset[moveid].includes(genChar) :\r\n\t\t\t\tlearnset[moveid].includes(genChar) ||\r\n\t\t\t\t\t(learnset[moveid].includes(`${gen + 1}`) && move.gen === gen))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetTier(pokemon: Species) {\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\treturn pokemon.num >= 0 ? String(pokemon.num) : pokemon.tier;\r\n\t\t}\r\n\t\tlet table = window.BattleTeambuilderTable;\r\n\t\tconst gen = this.dex.gen;\r\n\t\tconst tableKey = this.formatType === 'doubles' ? `gen${gen}doubles` :\r\n\t\t\tthis.formatType === 'letsgo' ? 'gen7letsgo' :\r\n\t\t\tthis.formatType === 'bdsp' ? 'gen8bdsp' :\r\n\t\t\tthis.formatType === 'bdspdoubles' ? 'gen8bdspdoubles' :\r\n\t\t\tthis.formatType === 'nfe' ? `gen${gen}nfe` :\r\n\t\t\tthis.formatType === 'lc' ? `gen${gen}lc` :\r\n\t\t\tthis.formatType === 'dlc1' ? 'gen8dlc1' :\r\n\t\t\tthis.formatType === 'dlc1doubles' ? 'gen8dlc1doubles' :\r\n\t\t\tthis.formatType === 'natdex' ? `gen${gen}natdex` :\r\n\t\t\tthis.formatType === 'stadium' ? `gen${gen}stadium${gen > 1 ? gen : ''}` :\r\n\t\t\tthis.formatType === 'fusion' ? `fusion` :\r\n\t\t\t`gen${gen}`;\r\n\t\tif (table && table[tableKey]) {\r\n\t\t\ttable = table[tableKey];\r\n\t\t}\r\n\t\tif (!table) return pokemon.tier;\r\n\r\n\t\tlet id = pokemon.id;\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\t\tif (id.slice(-5) === 'totem' && id.slice(0, -5) in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id.slice(0, -5)];\r\n\t\t}\r\n\t\tid = toID(pokemon.baseSpecies);\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\r\n\t\treturn pokemon.tier;\r\n\t}\r\n\tabstract getTable(): {[id: string]: any};\r\n\tabstract getDefaultResults(): SearchRow[];\r\n\tabstract getBaseResults(): SearchRow[];\r\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\r\n\tabstract sort(input: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[];\r\n}\r\n\r\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\r\n\tsortRow: SearchRow = ['sortpokemon', ''];\r\n\tgetTable() {\r\n\t\treturn BattlePokedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tfor (let id in BattlePokedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bulbasaur':\r\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chikorita':\r\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'treecko':\r\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'turtwig':\r\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'victini':\r\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chespin':\r\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'rowlet':\r\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grookey':\r\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sprigatito':\r\n\t\t\t\tresults.push(['header', \"Generation 9\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'missingno':\r\n\t\t\t\tresults.push(['header', \"Glitch\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'syclar':\r\n\t\t\t\tresults.push(['header', \"CAP\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pikachucosplay':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['pokemon', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tconst format = this.format;\r\n\t\tif (!format) return this.getDefaultResults();\r\n\t\tconst isVGCOrBS = format.startsWith('battlespot') || format.startsWith('battlestadium') || format.startsWith('vgc');\r\n\t\tlet isDoublesOrBS = isVGCOrBS || this.formatType?.includes('doubles');\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif ((format.endsWith('cap') || format.endsWith('caplc')) && dex.gen < 9) {\r\n\t\t\ttable = table['gen' + dex.gen];\r\n\t\t} else if (isVGCOrBS) {\r\n\t\t\ttable = table['gen' + dex.gen + 'vgc'];\r\n\t\t} else if (\r\n\t\t\ttable['gen' + dex.gen + 'doubles'] && dex.gen > 4 &&\r\n\t\t\tthis.formatType !== 'letsgo' && this.formatType !== 'bdspdoubles' && this.formatType !== 'dlc1doubles' &&\r\n\t\t\t(\r\n\t\t\t\tformat.includes('doubles') || format.includes('triples') ||\r\n\t\t\t\tformat === 'freeforall' || format.startsWith('ffa') ||\r\n\t\t\t\tformat === 'partnersincrime'\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\ttable = table['gen' + dex.gen + 'doubles'];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (this.formatType === 'fusion') {\r\n\t\t\ttable = table['fusion'];\r\n\t\t} else if (dex.gen < 9 && !this.formatType) {\r\n\t\t\ttable = table['gen' + dex.gen];\r\n\t\t} else if (this.formatType?.startsWith('bdsp')) {\r\n\t\t\ttable = table['gen8' + this.formatType];\r\n\t\t} else if (this.formatType === 'letsgo') {\r\n\t\t\ttable = table['gen7letsgo'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['gen' + this.dex.gen + 'natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['gen' + dex.gen + 'metronome'];\r\n\t\t} else if (this.formatType === 'nfe') {\r\n\t\t\ttable = table['gen' + dex.gen + 'nfe'];\r\n\t\t} else if (this.formatType === 'lc') {\r\n\t\t\ttable = table['gen' + dex.gen + 'lc'];\r\n\t\t} else if (this.formatType?.startsWith('dlc1')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen8dlc1doubles'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen8dlc1'];\r\n\t\t\t}\r\n\t\t} else if (this.formatType === 'stadium') {\r\n\t\t\ttable = table['gen' + dex.gen + 'stadium' + (dex.gen > 1 ? dex.gen : '')];\r\n\t\t}\r\n\r\n\t\tif (!table.tierSet) {\r\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.tiers = null;\r\n\t\t}\r\n\t\tlet tierSet: SearchRow[] = table.tierSet;\r\n\t\tlet slices: {[k: string]: number} = table.formatSlices;\r\n\t\tif (format === 'ubers' || format === 'uber') tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (isVGCOrBS) {\r\n\t\t\tif (format.endsWith('series13')) {\r\n\t\t\t\t// Show Mythicals\r\n\t\t\t} else if (\r\n\t\t\t\tformat === 'vgc2010' || format === 'vgc2016' || format.startsWith('vgc2019') ||\r\n\t\t\t\tformat === 'vgc2022' || format.endsWith('series10') || format.endsWith('series11')\r\n\t\t\t) {\r\n\t\t\t\ttierSet = tierSet.slice(slices[\"Restricted Legendary\"]);\r\n\t\t\t} else {\r\n\t\t\t\ttierSet = tierSet.slice(slices.Regular);\r\n\t\t\t}\r\n\t\t} else if (format === 'ou') tierSet = tierSet.slice(slices.OU);\r\n\t\telse if (format === 'uu') tierSet = tierSet.slice(slices.UU);\r\n\t\telse if (format === 'ru') tierSet = tierSet.slice(slices.RU || slices.UU);\r\n\t\telse if (format === 'nu') tierSet = tierSet.slice(slices.NU || slices.RU || slices.UU);\r\n\t\telse if (format === 'pu') tierSet = tierSet.slice(slices.PU || slices.NU);\r\n\t\telse if (format === 'zu') tierSet = tierSet.slice(slices.ZU || slices.PU || slices.NU);\r\n\t\telse if (format === 'lc' || format === 'lcuu' || format.startsWith('lc') || (format !== 'caplc' && format.endsWith('lc'))) tierSet = tierSet.slice(slices.LC);\r\n\t\telse if (format === 'cap') tierSet = tierSet.slice(0, slices.AG || slices.Uber).concat(tierSet.slice(slices.OU));\r\n\t\telse if (format === 'caplc') {\r\n\t\t\ttierSet = tierSet.slice(slices['CAP LC'], slices.AG || slices.Uber).concat(tierSet.slice(slices.LC));\r\n\t\t} else if (format === 'anythinggoes' || format.endsWith('ag') || format.startsWith('ag')) {\r\n\t\t\ttierSet = tierSet.slice(slices.AG);\r\n\t\t} else if (format.includes('hackmons') || format.endsWith('bh')) tierSet = tierSet.slice(slices.AG || slices.Uber);\r\n\t\telse if (format === 'monotype') tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (format === 'doublesubers') tierSet = tierSet.slice(slices.DUber);\r\n\t\telse if (format === 'doublesou' && dex.gen > 4) tierSet = tierSet.slice(slices.DOU);\r\n\t\telse if (format === 'doublesuu') tierSet = tierSet.slice(slices.DUU);\r\n\t\telse if (format === 'doublesnu') tierSet = tierSet.slice(slices.DNU || slices.DUU);\r\n\t\telse if (this.formatType?.startsWith('bdsp') || this.formatType === 'letsgo' || this.formatType === 'stadium') {\r\n\t\t\ttierSet = tierSet.slice(slices.Uber);\r\n\t\t} else if (!isDoublesOrBS) {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.OU, slices.UU),\r\n\t\t\t\t...tierSet.slice(slices.AG, slices.Uber),\r\n\t\t\t\t...tierSet.slice(slices.Uber, slices.OU),\r\n\t\t\t\t...tierSet.slice(slices.UU),\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\r\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\r\n\t\t\t\t...tierSet.slice(slices.DUU),\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tif (dex.gen >= 5) {\r\n\t\t\tif (format === 'zu' && table.zuBans) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tif (id in table.zuBans) return false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (format === 'monotype' && table.monotypeBans) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tif (id in table.monotypeBans) return false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Filter out Gmax Pokemon from standard tier selection\r\n\t\tif (!/^(battlestadium|vgc|doublesubers)/g.test(format)) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (type === 'header' && id === 'DUber by technicality') return false;\r\n\t\t\t\tif (type === 'pokemon') return !id.endsWith('gmax');\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn tierSet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'pokemon') return true;\r\n\t\tconst species = this.dex.species.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (species.types[0] !== value && species.types[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'egggroup':\r\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tier':\r\n\t\t\t\tif (this.getTier(species) !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'move':\r\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean) {\r\n\t\tconst sortOrder = reverseSort ? -1 : 1;\r\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst stat1 = this.dex.species.get(id1).baseStats[sortCol as StatName];\r\n\t\t\t\tconst stat2 = this.dex.species.get(id2).baseStats[sortCol as StatName];\r\n\t\t\t\treturn (stat2 - stat1) * sortOrder;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'bst') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst base1 = this.dex.species.get(id1).baseStats;\r\n\t\t\t\tconst base2 = this.dex.species.get(id2).baseStats;\r\n\t\t\t\tconst bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\r\n\t\t\t\tconst bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\r\n\t\t\t\treturn (bst2 - bst1) * sortOrder;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'name') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\r\n\tgetTable() {\r\n\t\treturn BattleAbilities;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in BattleAbilities) {\r\n\t\t\tresults.push(['ability', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isAAA = (format === 'almostanyability' || format.includes('aaa'));\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.species.get(this.species);\r\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\r\n\r\n\t\tif (species.isMega) {\r\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\tspecies = dex.species.get(species.baseSpecies);\r\n\t\t}\r\n\t\t\r\n\t\tfor (const i in species.abilities)\r\n\t\t{\r\n\t\t\tconst ability = species.abilities[i];\r\n\t\t\tif (!ability) continue;\r\n\t\t\t\r\n\t\t\tabilitySet.push(['ability', toID(ability)]);\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\tabilitySet.push(['ability', toID(species.abilities['0'])]);\t\t\r\n\t\tif (species.abilities['1']) {\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['1'])]);\r\n\t\t}\r\n\t\tif (species.abilities['H']) {\r\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['H'])]);\r\n\t\t}\r\n\t\tif (species.abilities['S']) {\r\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['S'])]);\r\n\t\t}\r\n\t\t*/\r\n\t\t\r\n\t\tif (isAAA || format.includes('metronomebattle') || isHackmons) {\r\n\t\t\tlet abilities: ID[] = [];\r\n\t\t\tfor (let i in this.getTable()) {\r\n\t\t\t\tconst ability = dex.abilities.get(i);\r\n\t\t\t\tif (ability.isNonstandard) continue;\r\n\t\t\t\tif (ability.gen > dex.gen) continue;\r\n\t\t\t\tabilities.push(ability.id);\r\n\t\t\t}\r\n\r\n\t\t\tlet goodAbilities: SearchRow[] = [['header', \"Abilities\"]];\r\n\t\t\tlet poorAbilities: SearchRow[] = [['header', \"Situational Abilities\"]];\r\n\t\t\tlet badAbilities: SearchRow[] = [['header', \"Unviable Abilities\"]];\r\n\t\t\tfor (const ability of abilities.sort().map(abil => dex.abilities.get(abil))) {\r\n\t\t\t\tlet rating = ability.rating;\r\n\t\t\t\tif (ability.id === 'normalize') rating = 3;\r\n\t\t\t\tif (rating >= 3) {\r\n\t\t\t\t\tgoodAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else if (rating >= 2) {\r\n\t\t\t\t\tpoorAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbadAbilities.push(['ability', ability.id]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tabilitySet = [...goodAbilities, ...poorAbilities, ...badAbilities];\r\n\t\t\tif (species.isMega) {\r\n\t\t\t\tif (isAAA) {\r\n\t\t\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\t\t}\r\n\t\t\t\t// species is unused after this, so no need to replace\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn abilitySet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.abilities.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\r\n\tgetTable() {\r\n\t\treturn BattleItems;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.formatType?.startsWith('bdsp')) {\r\n\t\t\ttable = table['gen8bdsp'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['gen' + this.dex.gen + 'natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['gen' + this.dex.gen + 'metronome'];\r\n\t\t} else if (this.dex.gen < 9) {\r\n\t\t\ttable = table['gen' + this.dex.gen];\r\n\t\t}\r\n\t\tif (!table.itemSet) {\r\n\t\t\ttable.itemSet = table.items.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') {\r\n\t\t\t\t\treturn ['item', r];\r\n\t\t\t\t}\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.items = null;\r\n\t\t}\r\n\t\treturn table.itemSet;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst speciesName = this.dex.species.get(this.species).name;\r\n\t\tconst results = this.getDefaultResults();\r\n\t\tconst speciesSpecific: SearchRow[] = [];\r\n\t\tfor (const row of results) {\r\n\t\t\tif (row[0] !== 'item') continue;\r\n\t\t\tif (this.dex.items.get(row[1]).itemUser?.includes(speciesName)) {\r\n\t\t\t\tspeciesSpecific.push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (speciesSpecific.length) {\r\n\t\t\treturn [\r\n\t\t\t\t['header', \"Specific to \" + speciesName],\r\n\t\t\t\t...speciesSpecific,\r\n\t\t\t\t...results,\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.abilities.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\r\n\tsortRow: SearchRow = ['sortmove', ''];\r\n\tgetTable() {\r\n\t\treturn BattleMovedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tresults.push(['header', \"Moves\"]);\r\n\t\tfor (let id in BattleMovedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'paleowave':\r\n\t\t\t\tresults.push(['header', \"CAP moves\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'magikarpsrevenge':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['move', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprivate moveIsNotUseless(id: ID, species: Species, moves: string[], set: PokemonSet | null) {\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet abilityid: ID = set ? toID(set.ability) : '' as ID;\r\n\t\tconst itemid: ID = set ? toID(set.item) : '' as ID;\r\n\r\n\t\tif (dex.gen === 1) {\r\n\t\t\t// Usually not useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'growth', 'headbutt', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Usually useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'disable', 'haze', 'leechseed', 'quickattack', 'roar', 'thunder', 'toxic', 'triattack', 'waterfall', 'whirlwind',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Not useless only when certain moves aren't present\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\r\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\r\n\t\t\tcase 'doublekick': return !moves.includes('submission');\r\n\t\t\tcase 'firepunch': return !moves.includes('fireblast');\r\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\r\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\r\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\r\n\t\t\tcase 'stomp': return !moves.includes('headbutt');\r\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\r\n\t\t\tcase 'thunderpunch': return !moves.includes('thunderbolt');\r\n\t\t\tcase 'triattack': return !moves.includes('bodyslam');\r\n\t\t\t}\r\n\t\t\t// Useful and Useless moves for Stadium OU, which changes many game mechanics.\r\n\t\t\tif (this.formatType === 'stadium') {\r\n\t\t\t\tif (['doubleedge', 'focusenergy', 'haze'].includes(id)) return true;\r\n\t\t\t\tif (['hyperbeam', 'sing', 'hypnosis'].includes(id)) return false;\r\n\t\t\t\tswitch (id) {\r\n\t\t\t\tcase 'fly': return !moves.includes('drillpeck');\r\n\t\t\t\tcase 'dig': return !moves.includes('earthquake');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'letsgo') {\r\n\t\t\tif (['megadrain', 'teleport'].includes(id)) return true;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\tif (id === 'metronome') return true;\r\n\t\t}\r\n\r\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\r\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\r\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\r\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\r\n\r\n\t\tswitch (id) {\r\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch':\r\n\t\t\treturn abilityid !== 'sheerforce';\r\n\t\tcase 'solarbeam': case 'solarblade':\r\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll', 'orichalcumpulse'].includes(abilityid) || itemid === 'powerherb';\r\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing': case 'zapcannon':\r\n\t\t\treturn abilityid === 'noguard';\r\n\t\tcase 'heatcrash': case 'heavyslam':\r\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\r\n\r\n\t\tcase 'aerialace':\r\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\r\n\t\tcase 'ancientpower':\r\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\r\n\t\tcase 'aquajet':\r\n\t\t\treturn !moves.includes('jetpunch');\r\n\t\tcase 'aurawheel':\r\n\t\t\treturn species.baseSpecies === 'Morpeko';\r\n\t\tcase 'axekick':\r\n\t\t\treturn !moves.includes('highjumpkick');\r\n\t\tcase 'bellydrum':\r\n\t\t\treturn moves.includes('aquajet') || moves.includes('jetpunch') || moves.includes('extremespeed') ||\r\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\r\n\t\tcase 'bulletseed':\r\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\r\n\t\tcase 'chillingwater':\r\n\t\t\treturn !moves.includes('scald');\r\n\t\tcase 'counter':\r\n\t\t\treturn species.baseStats.hp >= 65;\r\n\t\tcase 'darkvoid':\r\n\t\t\treturn dex.gen < 7;\r\n\t\tcase 'dualwingbeat':\r\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\r\n\t\tcase 'feint':\r\n\t\t\treturn abilityid === 'refrigerate';\r\n\t\tcase 'grassyglide':\r\n\t\t\treturn abilityid === 'grassysurge';\r\n\t\tcase 'gyroball':\r\n\t\t\treturn species.baseStats.spe <= 60;\r\n\t\tcase 'headbutt':\r\n\t\t\treturn abilityid === 'serenegrace';\r\n\t\tcase 'hex':\r\n\t\t\treturn !moves.includes('infernalparade');\r\n\t\tcase 'hiddenpowerelectric':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\r\n\t\tcase 'hiddenpowerfighting':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\r\n\t\tcase 'hiddenpowerfire':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower') &&\r\n\t\t\t\t!moves.includes('mysticalfire') && !moves.includes('burningjealousy');\r\n\t\tcase 'hiddenpowergrass':\r\n\t\t\treturn !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain');\r\n\t\tcase 'hiddenpowerice':\r\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) ||\r\n\t\t\t\t(dex.gen > 5 && !moves.includes('aurorabeam') && !moves.includes('glaciate'));\r\n\t\tcase 'hiddenpowerflying':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\r\n\t\tcase 'hiddenpowerbug':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\r\n\t\tcase 'hiddenpowerpsychic':\r\n\t\t\treturn species.baseSpecies === 'Unown';\r\n\t\tcase 'hyperspacefury':\r\n\t\t\treturn species.id === 'hoopaunbound';\r\n\t\tcase 'hypnosis':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\r\n\t\tcase 'icepunch':\r\n\t\t\treturn !moves.includes('icespinner') || ['sheerforce', 'ironfist'].includes(abilityid) || itemid === 'punchingglove';\r\n\t\tcase 'iciclecrash':\r\n\t\t\treturn !moves.includes('mountaingale');\r\n\t\tcase 'icywind':\r\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\r\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.formatType === 'doubles';\r\n\t\tcase 'infestation':\r\n\t\t\treturn moves.includes('stickyweb');\r\n\t\tcase 'irondefense':\r\n\t\t\treturn !moves.includes('acidarmor');\r\n\t\tcase 'irontail':\r\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'jumpkick':\r\n\t\t\treturn !moves.includes('highjumpkick') && !moves.includes('axekick');\r\n\t\tcase 'lastresort':\r\n\t\t\treturn set && set.moves.length < 3;\r\n\t\tcase 'leechlife':\r\n\t\t\treturn dex.gen > 6;\r\n\t\tcase 'mysticalfire':\r\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\r\n\t\tcase 'naturepower':\r\n\t\t\treturn dex.gen === 5;\r\n\t\tcase 'nightslash':\r\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\r\n\t\tcase 'outrage':\r\n\t\t\treturn !moves.includes('glaiverush');\r\n\t\tcase 'petaldance':\r\n\t\t\treturn abilityid === 'owntempo';\r\n\t\tcase 'phantomforce':\r\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.formatType === 'doubles';\r\n\t\tcase 'poisonfang':\r\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'relicsong':\r\n\t\t\treturn species.id === 'meloetta';\r\n\t\tcase 'refresh':\r\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\r\n\t\tcase 'risingvoltage':\r\n\t\t\treturn abilityid === 'electricsurge' || abilityid === 'hadronengine';\r\n\t\tcase 'rocktomb':\r\n\t\t\treturn abilityid === 'technician';\r\n\t\tcase 'selfdestruct':\r\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\r\n\t\tcase 'shadowpunch':\r\n\t\t\treturn abilityid === 'ironfist' && !moves.includes('ragefist');\r\n\t\tcase 'shelter':\r\n\t\t\treturn !moves.includes('acidarmor') && !moves.includes('irondefense');\r\n\t\tcase 'smackdown':\r\n\t\t\treturn species.types.includes('Ground');\r\n\t\tcase 'smartstrike':\r\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\r\n\t\tcase 'soak':\r\n\t\t\treturn abilityid === 'unaware';\r\n\t\tcase 'steelwing':\r\n\t\t\treturn !moves.includes('ironhead');\r\n\t\tcase 'stompingtantrum':\r\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.formatType === 'doubles';\r\n\t\tcase 'stunspore':\r\n\t\t\treturn !moves.includes('thunderwave');\r\n\t\tcase 'technoblast':\r\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\r\n\t\tcase 'teleport':\r\n\t\t\treturn dex.gen > 7;\r\n\t\tcase 'terrainpulse': case 'waterpulse':\r\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\r\n\t\tcase 'toxicspikes':\r\n\t\t\treturn abilityid !== 'toxicdebris';\r\n\t\tcase 'trickroom':\r\n\t\t\treturn species.baseStats.spe <= 100;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'doubles' && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tconst moveData = BattleMovedex[id];\r\n\t\tif (!moveData) return true;\r\n\t\tif (moveData.category === 'Status') {\r\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (moveData.basePower < 75) {\r\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (id === 'skydrop') return true;\r\n\t\t// strong moves\r\n\t\tif (moveData.flags?.charge) {\r\n\t\t\treturn itemid === 'powerherb';\r\n\t\t}\r\n\t\tif (moveData.flags?.recharge) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (moveData.flags?.slicing && abilityid === 'sharpness') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\r\n\t}\r\n\tstatic readonly GOOD_STATUS_MOVES = [\r\n\t\t'acidarmor', 'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'batonpass', 'bellydrum', 'bulkup', 'calmmind', 'chillyreception', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'encore', 'extremeevoboost', 'filletaway', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'memento', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'reflecttype', 'rest', 'revivalblessing', 'roar', 'rockpolish', 'roost', 'shedtail', 'shellsmash', 'shiftgear', 'shoreup', 'silktrap', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'tidyup', 'toxic', 'transform', 'trick', 'victorydance', 'whirlwind', 'willowisp', 'wish', 'yawn',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_WEAK_MOVES = [\r\n\t\t'accelerock', 'acrobatics', 'aquacutter', 'avalanche', 'barbbarrage', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'ceaselessedge', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'drainingkiss', 'endeavor', 'facade', 'firefang', 'flipturn', 'flowertrick', 'freezedry', 'frustration', 'geargrind', 'grassknot', 'gyroball', 'icefang', 'iceshard', 'iciclespear', 'infernalparade', 'knockoff', 'lastrespects', 'lowkick', 'machpunch', 'mortalspin', 'mysticalpower', 'naturesmadness', 'nightshade', 'nuzzle', 'pikapapow', 'populationbomb', 'psychocut', 'psyshieldbash', 'pursuit', 'quickattack', 'ragefist', 'rapidspin', 'return', 'rockblast', 'ruination', 'saltcure', 'scorchingsands', 'seismictoss', 'shadowclaw', 'shadowsneak', 'sizzlyslide', 'stoneaxe', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tailslap', 'trailblaze', 'tripleaxel', 'tripledive', 'twinbeam', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly BAD_STRONG_MOVES = [\r\n\t\t'belch', 'burnup', 'crushclaw', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_DOUBLES_MOVES = [\r\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'lunarblessing', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\r\n\t] as ID[] as readonly ID[];\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.species.get(this.species);\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isSTABmons = (format.includes('stabmons') || format === 'staaabmons');\r\n\t\tconst isTradebacks = format.includes('tradebacks');\r\n\t\tconst regionBornLegality = dex.gen >= 6 &&\r\n\t\t\t/^battle(spot|stadium|festival)/.test(format) || format.startsWith('vgc') ||\r\n\t\t\t(dex.gen === 9 && this.formatType !== 'natdex');\r\n\r\n\t\tlet learnsetid = this.firstLearnsetid(species.id);\r\n\t\tlet moves: string[] = [];\r\n\t\tlet sketchMoves: string[] = [];\r\n\t\tlet sketch = false;\r\n\t\tlet gen = '' + dex.gen;\r\n\t\tlet lsetTable = BattleTeambuilderTable;\r\n\t\tif (this.formatType?.startsWith('bdsp')) lsetTable = lsetTable['gen8bdsp'];\r\n\t\tif (this.formatType === 'letsgo') lsetTable = lsetTable['gen7letsgo'];\r\n\t\tif (this.formatType?.startsWith('dlc1')) lsetTable = lsetTable['gen8dlc1'];\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = lsetTable.learnsets[learnsetid];\r\n\t\t\tif (learnset) {\r\n\t\t\t\tfor (let moveid in learnset) {\r\n\t\t\t\t\tlet learnsetEntry = learnset[moveid];\r\n\t\t\t\t\tconst move = dex.moves.get(moveid);\r\n\t\t\t\t\tconst minGenCode: {[gen: number]: string} = {6: 'p', 7: 'q', 8: 'g', 9: 'a'};\r\n\t\t\t\t\tif (regionBornLegality && !species.isFusion && !learnsetEntry.includes(minGenCode[dex.gen])) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!learnsetEntry.includes(gen) &&\r\n\t\t\t\t\t\t(!isTradebacks ? true : !(move.gen <= dex.gen && learnsetEntry.includes('' + (dex.gen + 1))))\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.formatType !== 'natdex' && move.isNonstandard === \"Past\") {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.formatType?.startsWith('dlc1') &&\r\n\t\t\t\t\t\tBattleTeambuilderTable['gen8dlc1']?.nonstandardMoves.includes(moveid)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (moves.includes(moveid)) continue;\r\n\t\t\t\t\tmoves.push(moveid);\r\n\t\t\t\t\tif (moveid === 'sketch') sketch = true;\r\n\t\t\t\t\tif (moveid === 'hiddenpower') {\r\n\t\t\t\t\t\tmoves.push(\r\n\t\t\t\t\t\t\t'hiddenpowerbug', 'hiddenpowerdark', 'hiddenpowerdragon', 'hiddenpowerelectric', 'hiddenpowerfighting', 'hiddenpowerfire', 'hiddenpowerflying', 'hiddenpowerghost', 'hiddenpowergrass', 'hiddenpowerground', 'hiddenpowerice', 'hiddenpowerpoison', 'hiddenpowerpsychic', 'hiddenpowerrock', 'hiddenpowersteel', 'hiddenpowerwater'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, species.id);\r\n\t\t}\r\n\t\tif (sketch || isHackmons) {\r\n\t\t\tif (isHackmons) moves = [];\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tif (!format.startsWith('cap') && (id === 'paleowave' || id === 'shadowstrike')) continue;\r\n\t\t\t\tconst move = dex.moves.get(id);\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (sketch) {\r\n\t\t\t\t\tif (move.noSketch || move.isMax || move.isZ) continue;\r\n\t\t\t\t\tif (move.isNonstandard && move.isNonstandard !== 'Past') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tsketchMoves.push(move.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!(dex.gen < 8 || this.formatType === 'natdex') && move.isZ) continue;\r\n\t\t\t\t\tif (typeof move.isMax === 'string') continue;\r\n\t\t\t\t\tif (move.isMax && dex.gen > 8) continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'LGPE' && this.formatType !== 'letsgo') continue;\r\n\t\t\t\t\tmoves.push(move.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.formatType === 'metronome') moves = ['metronome'];\r\n\t\tif (isSTABmons) {\r\n\t\t\tfor (let id in this.getTable()) {\r\n\t\t\t\tconst move = dex.moves.get(id);\r\n\t\t\t\tif (moves.includes(move.id)) continue;\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (move.isZ || move.isMax || (move.isNonstandard && move.isNonstandard !== 'Unobtainable')) continue;\r\n\r\n\t\t\t\tconst speciesTypes: string[] = [];\r\n\t\t\t\tconst moveTypes: string[] = [];\r\n\t\t\t\tfor (let i = dex.gen; i >= species.gen && i >= move.gen; i--) {\r\n\t\t\t\t\tconst genDex = Dex.forGen(i);\r\n\t\t\t\t\tmoveTypes.push(genDex.moves.get(move.name).type);\r\n\r\n\t\t\t\t\tconst pokemon = genDex.species.get(species.name);\r\n\t\t\t\t\tlet baseSpecies = genDex.species.get(pokemon.changesFrom || pokemon.name);\r\n\t\t\t\t\tif (!pokemon.battleOnly) speciesTypes.push(...pokemon.types);\r\n\t\t\t\t\tlet prevo = pokemon.prevo;\r\n\t\t\t\t\twhile (prevo) {\r\n\t\t\t\t\t\tconst prevoSpecies = genDex.species.get(prevo);\r\n\t\t\t\t\t\tspeciesTypes.push(...prevoSpecies.types);\r\n\t\t\t\t\t\tprevo = prevoSpecies.prevo;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pokemon.battleOnly && typeof pokemon.battleOnly === 'string') {\r\n\t\t\t\t\t\tspecies = dex.species.get(pokemon.battleOnly);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst excludedForme = (s: Species) => [\r\n\t\t\t\t\t\t'Alola', 'Alola-Totem', 'Galar', 'Galar-Zen', 'Hisui', 'Paldea', 'Paldea-Combat', 'Paldea-Blaze', 'Paldea-Aqua',\r\n\t\t\t\t\t].includes(s.forme);\r\n\t\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\r\n\t\t\t\t\t\tif (!excludedForme(species)) speciesTypes.push(...baseSpecies.types);\r\n\t\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\r\n\t\t\t\t\t\t\tconst forme = dex.species.get(formeName);\r\n\t\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) speciesTypes.push(...forme.types);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet valid = false;\r\n\t\t\t\tfor (let type of moveTypes) {\r\n\t\t\t\t\tif (speciesTypes.includes(type)) {\r\n\t\t\t\t\t\tvalid = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (valid) moves.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmoves.sort();\r\n\t\tsketchMoves.sort();\r\n\r\n\t\tlet usableMoves: SearchRow[] = [];\r\n\t\tlet uselessMoves: SearchRow[] = [];\r\n\t\tfor (const id of moves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, moves, this.set);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sketchMoves.length) {\r\n\t\t\tusableMoves.push(['header', \"Sketched moves\"]);\r\n\t\t\tuselessMoves.push(['header', \"Useless sketched moves\"]);\r\n\t\t}\r\n\t\tfor (const id of sketchMoves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, sketchMoves, this.set);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...usableMoves, ...uselessMoves];\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'move') return true;\r\n\t\tconst move = this.dex.moves.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (move.type !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tif (move.category !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[] {\r\n\t\tconst sortOrder = reverseSort ? -1 : 1;\r\n\t\tswitch (sortCol) {\r\n\t\tcase 'power':\r\n\t\t\tlet powerTable: {[id: string]: number | undefined} = {\r\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\r\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\r\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\r\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\r\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\r\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\r\n\t\t\t};\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet move1 = this.dex.moves.get(id1);\r\n\t\t\t\tlet move2 = this.dex.moves.get(id2);\r\n\t\t\t\tlet pow1 = move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\r\n\t\t\t\tlet pow2 = move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\r\n\t\t\t\treturn (pow2 - pow1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'accuracy':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet accuracy1 = this.dex.moves.get(id1).accuracy || 0;\r\n\t\t\t\tlet accuracy2 = this.dex.moves.get(id2).accuracy || 0;\r\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\r\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\r\n\t\t\t\treturn (accuracy2 - accuracy1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'pp':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet pp1 = this.dex.moves.get(id1).pp || 0;\r\n\t\t\t\tlet pp2 = this.dex.moves.get(id2).pp || 0;\r\n\t\t\t\treturn (pp2 - pp1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'name':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\r\n\tgetTable() {\r\n\t\treturn {physical: 1, special: 1, status: 1};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\treturn [\r\n\t\t\t['category', 'physical' as ID],\r\n\t\t\t['category', 'special' as ID],\r\n\t\t\t['category', 'status' as ID],\r\n\t\t];\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\r\n\tgetTable() {\r\n\t\treturn window.BattleTypeChart;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in window.BattleTypeChart) {\r\n\t\t\tresults.push(['type', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n"],"mappings":"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"}